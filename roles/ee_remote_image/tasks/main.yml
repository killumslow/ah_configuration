---
# tasks file for ee_remote_image
- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Check if skopeo is installed
  assert:
    that:
      - "'skopeo' in ansible_facts.packages"
    success_msg: Skopeo is installed
    fail_msg: Skopeo must be installed before using role

- name: Interating through remote execution environment list
  include_tasks: add-remote.yml
  loop: "{{ ah_ee_remote_images }}"

# - name: Get list of remote registries
#   ansible.builtin.uri:
#     url: "https://{{ ah_host }}/api/galaxy/_ui/v1/execution-environments/registries/"
#     user: "{{ ah_user }}"
#     password: "{{ ah_pass }}"
#     method: GET
#     force_basic_auth: yes
#     status_code: 200
#     validate_certs: false
#   register: result
#
# - name: get reference id for registry
#   ansible.builtin.set_fact:
#     registry_id: "{{ item.pk }}"
#   loop: "{{ result.json.data }}"
#   when:
#     - item.name == registry_name
#
# - name: print registry reference
#   ansible.builtin.debug:
#     var: registry_id
#   tags:
#     - debug
#     - never
#
# # Only notifies if name does not exist. Takes into account that name exists but manifest does not if a repo sync has not occurred yet
# - name: Check if image already exists and launch handler if it does not
#   command: "skopeo inspect docker://{{ ah_host }}/{{ ee_name }} --tls-verify=false --username {{ ah_user }} --password {{ ah_pass }}"
#   register: results
#   failed_when:
#     - results.rc != 0
#     - results.rc != 1
#   changed_when:
#     - '"name unknown: Repository not found" in results.stderr'
#   notify: Create Execution Environment
#   no_log: true
#
# - debug:
#     var: results
#   tags:
#     - debug
#     - never

# - name: Get list of remotes execution environments
#   ansible.builtin.uri:
#     url: "https://{{ ah_host }}/api/galaxy/_ui/v1/execution-environments/remotes"
#     user: "{{ ah_user }}"
#     password: "{{ ah_pass }}"
#     method: GET
#     force_basic_auth: yes
#     status_code: 200
#     validate_certs: false
#   register: result

# - name: Check to see if execution environment exists in returned list
#   ansible.builtin.set_fact:
#     run_handler: true
#   loop: "{{ result.json.data }}"
#   when:
#     - ee_name == item.name

# - name: Determine if handler automation should execute
#   debug:
#     msg: Will launch handler to create execution environment if it does not exist in provided list
#   changed_when:
#     - run_handler is not defined
#   notify: Create Execution Environment
#manifest unknown: Manifest not foun
